name: Infrastructure Deploy

on:
  workflow_dispatch:
    inputs:
      commit:
        description: "Branch/Commit ref"
        default: "origin/main"
        type: string
      environment:
        description: "Environment to deploy to"
        default: "staging"
        type: string

jobs:
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      dockerTag: ${{ steps.compute.outputs.docker_tag }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Reset to commit
        run: |
          git fetch
          git reset --hard ${{ inputs.commit }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Compute some values
        id: compute
        run: |
          echo "::set-output name=docker_tag::${GITHUB_SHA: -10}"
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ steps.compute.outputs.docker_tag }}
        run: |
          cd packages/api
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy
    needs: build
    environment: staging
    runs-on: ubuntu-latest
    env:
      PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USER: ${{ secrets.DB_USER }}
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      API_IMAGE_TAG: ${{ needs.build.outputs.dockerTag }}
      DB_URL: ${{ secrets.DB_URL }}
      DOMAIN: ${{ secrets.DOMAIN }}
      ROUTE_53_ZONE: ${{ secrets.ROUTE_53_ZONE }}
      SUBGRAPH_MAINNET_API: ${{ secrets.SUBGRAPH_MAINNET_API }}
      SUBGRAPH_GOERLI_API: ${{ secrets.SUBGRAPH_GOERLI_API }}
      SUBGRAPH_OPTIMISM_MAINNET_API: ${{ secrets.SUBGRAPH_OPTIMISM_MAINNET_API }}
      SUBGRAPH_FANTOM_TESTNET_API: ${{ secrets.SUBGRAPH_FANTOM_TESTNET_API }}
      SUBGRAPH_FANTOM_MAINNET_API: ${{ secrets.SUBGRAPH_FANTOM_MAINNET_API }}
      SUBGRAPH_DUMMY_API: ${{ secrets.SUBGRAPH_DUMMY_API }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      SENTRY_RELEASE: ${{ github.sha }}
      OPTIMISM_ETHERSCAN_API: ${{ secrets.OPTIMISM_ETHERSCAN_API }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Reset to commit
        run: |
          git fetch
          git reset --hard ${{ inputs.commit }}

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          # node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: infra/${{ inputs.environment }}/package-lock.json

      - name: Install Pulumi Dependencies
        # Install pulumi dependencies
        # Select the new pulumi stack
        run: |
          npm install
          pulumi stack select -c ${{ secrets.PULUMI_STACK }}
          pulumi config -s ${{ secrets.PULUMI_STACK }} set aws:region ${{ secrets.AWS_REGION }} --non-interactive
        working-directory: infra/${{ inputs.environment }}

      - name: Run Pulumi Preview
        uses: pulumi/actions@v3
        id: pulumi
        with:
          command: preview
          stack-name: ${{ secrets.PULUMI_STACK }}
          upsert: false
          work-dir: infra/${{ inputs.environment }}

      - name: Run Pulumi Up
        uses: pulumi/actions@v3
        with:
          command: up
          stack-name: ${{ secrets.PULUMI_STACK }}
          upsert: false
          work-dir: infra/${{ inputs.environment }}

  sentry-source-maps:
    name: Create and Upload Sentry Source Maps
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        with:
          version: 7

      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: "pnpm"

      - name: Install Dependencies
        run: |
          pnpm install

      - name: Build the API
        run: |
          pnpm api-build

      - name: Upload Source Maps to Sentry
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: staging
          sourcemaps: packages/api/bin/
          version: ${{ github.sha }}
          ignore_missing: true
