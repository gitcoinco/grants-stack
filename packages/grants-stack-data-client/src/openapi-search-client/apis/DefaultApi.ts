/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ApplicationsResponse,
  HTTPValidationError,
  SearchResponse,
} from '../models/index.js';
import {
    ApplicationsResponseFromJSON,
    ApplicationsResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SearchResponseFromJSON,
    SearchResponseToJSON,
} from '../models/index.js';

export interface SearchSearchGetRequest {
    q: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get Applications
     */
    async getApplicationsApplicationsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationsResponseFromJSON(jsonValue));
    }

    /**
     * Get Applications
     */
    async getApplicationsApplicationsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationsResponse> {
        const response = await this.getApplicationsApplicationsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Search
     */
    async searchSearchGetRaw(requestParameters: SearchSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchResponse>> {
        if (requestParameters.q === null || requestParameters.q === undefined) {
            throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling searchSearchGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchResponseFromJSON(jsonValue));
    }

    /**
     * Search
     */
    async searchSearchGet(requestParameters: SearchSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchResponse> {
        const response = await this.searchSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
