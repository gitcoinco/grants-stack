generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./docs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Round {
  id                 Int            @id @default(autoincrement())
  chainId            ChainId
  roundId            String         @unique
  votingStrategyName VotingStrategy
  matches            Match[]
  isSaturated        Boolean        @default(false)
  summary            Summary?

  @@map("round")
}

model Match {
  id                 Int    @id @default(autoincrement())
  projectId          String
  amount             Float
  sumOfContributions Float
  contributionCount  Int
  round              Round  @relation(fields: [roundId], references: [id])
  roundId            Int

  @@unique([projectId, roundId], name: "matchIdentifier")
  @@map("match")
}

model Summary {
  id                      Int   @id @default(autoincrement())
  contributionCount       Float
  uniqueContributors      Int
  totalContributionsInUSD Float
  averageUSDContribution  Float
  round                   Round @relation(fields: [roundId], references: id)
  roundId                 Int

  @@unique([roundId], name: "roundIdentifier")
  @@map("summary")
}

// ========= //
// = ENUMS = //
// ========= //
enum ChainId {
  GOERLI
  OPTIMISM_MAINNET
  FANTOM_MAINNET
  FANTOM_TESTNET
  LOCAL_ROUND_LAB
}

enum VotingStrategy {
  LINEAR_QUADRATIC_FUNDING
  QUADRATIC_VOTING
}
