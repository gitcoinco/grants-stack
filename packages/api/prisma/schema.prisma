generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "./docs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Round {
  id                 Int            @id @default(autoincrement())
  createdAt          DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt          DateTime       @updatedAt @db.Timestamptz(3)
  chainId            ChainId
  roundId            String         @unique
  votingStrategyName VotingStrategy
  matches            Match[]
  isSaturated        Boolean        @default(false)
  roundSummary       RoundSummary?
  projects           Project[]

  @@map("round")
}

model Project {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime        @updatedAt @db.Timestamptz(3)
  chainId        ChainId
  round          Round           @relation(fields: [roundId], references: [roundId])
  roundId        String
  projectId      String          @unique
  projectSummary ProjectSummary?

  @@map("project")
}

model Match {
  id                        Int      @id @default(autoincrement())
  createdAt                 DateTime @default(now()) @db.Timestamptz(3)
  updatedAt                 DateTime @updatedAt @db.Timestamptz(3)
  projectId                 String   @unique
  matchAmountInUSD          Float
  totalContributionsInUSD   Float
  matchPoolPercentage       Float
  matchAmountInToken        Float
  round                     Round    @relation(fields: [roundId], references: [roundId])
  roundId                   String
  projectPayoutAddress      String
  uniqueContributorsCount   Int?
  @@map("match")
}

model RoundSummary {
  id                      Int      @id @default(autoincrement())
  createdAt               DateTime @default(now()) @db.Timestamptz(3)
  updatedAt               DateTime @updatedAt @db.Timestamptz(3)
  contributionCount       Int
  uniqueContributors      Int
  totalContributionsInUSD Float
  averageUSDContribution  Float
  round                   Round    @relation(fields: [roundId], references: [roundId])
  roundId                 String

  @@unique([roundId], name: "roundSummaryIdentifier")
  @@map("roundSummary")
}

model ProjectSummary {
  id                      Int      @id @default(autoincrement())
  createdAt               DateTime @default(now()) @db.Timestamptz(3)
  updatedAt               DateTime @updatedAt @db.Timestamptz(3)
  contributionCount       Int
  uniqueContributors      Int
  totalContributionsInUSD Float
  averageUSDContribution  Float
  project                 Project  @relation(fields: [projectId], references: [projectId])
  projectId               String

  @@unique([projectId], name: "projectSummaryIdentifier")
  @@map("projectSummary")
}

// ========= //
// = ENUMS = //
// ========= //
enum ChainId {
  GOERLI
  OPTIMISM_MAINNET
  FANTOM_MAINNET
  FANTOM_TESTNET
  LOCAL_ROUND_LAB
  MAINNET
}

enum VotingStrategy {
  LINEAR_QUADRATIC_FUNDING
  QUADRATIC_VOTING
}
